{
	"folder_history":
	[
	],
	"last_version": 3114,
	"last_window_id": 2,
	"log_indexing": false,
	"settings":
	{
		"new_window_height": 0.0,
		"new_window_settings":
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 112.0,
				"last_filter": "install",
				"selected_items":
				[
					[
						"install",
						"Package Control: Install Package"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						"install pa",
						"Package Control: Install Package"
					]
				],
				"width": 746.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/jan/.Xresources-last",
				"/home/jan/.Xresources",
				"/etc/X11/xorg.conf.d/20-thinkpad.conf",
				"/home/jan/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 30.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"20"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"incremental_find":
			{
				"height": 30.0
			},
			"input":
			{
				"height": 0.0
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"replace":
			{
				"height": 56.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 229.0,
			"status_bar_visible": true,
			"template_settings":
			{
			}
		},
		"new_window_width": 0.0
	},
	"windows":
	[
		{
			"auto_complete":
			{
				"selected_items":
				[
				]
			},
			"buffers":
			[
				{
					"contents": "mpd + ncmpcpp\nequalizer ?\n\n\ntodo\n\n	- startup scripts\n	- compton\n	- sound\n	- network (nm-applet)\n	- multiple monitors or not\n	- run mpd\n	- run urxvt deamon\n	- add data parition\n	- make media keys work\n	- tmux + ranger + vim/sublime text setup\n	- zsh instead of bashl\n	- configure awesome",
					"settings":
					{
						"buffer_size": 286,
						"line_ending": "Unix",
						"name": "mpd + ncmpcpp"
					}
				},
				{
					"file": "/home/jan/.Xresources",
					"settings":
					{
						"buffer_size": 7453,
						"line_ending": "Unix"
					}
				},
				{
					"contents": "-- Standard awesome library\nlocal gears = require(\"gears\")\nlocal awful = require(\"awful\")\nrequire(\"awful.autofocus\")\n-- Widget and layout library\nlocal wibox = require(\"wibox\")\n-- Theme handling library\nlocal beautiful = require(\"beautiful\")\n-- Notification library\nlocal naughty = require(\"naughty\")\nlocal menubar = require(\"menubar\")\nlocal hotkeys_popup = require(\"awful.hotkeys_popup\").widget\n-- Enable VIM help for hotkeys widget when client with matching name is opened:\nrequire(\"awful.hotkeys_popup.keys.vim\")\n\n-- {{{ Error handling\n-- Check if awesome encountered an error during startup and fell back to\n-- another config (This code will only ever execute for the fallback config)\nif awesome.startup_errors then\n    naughty.notify({ preset = naughty.config.presets.critical,\n                     title = \"Oops, there were errors during startup!\",\n                     text = awesome.startup_errors })\nend\n\n-- Handle runtime errors after startup\ndo\n    local in_error = false\n    awesome.connect_signal(\"debug::error\", function (err)\n        -- Make sure we don't go into an endless error loop\n        if in_error then return end\n        in_error = true\n\n        naughty.notify({ preset = naughty.config.presets.critical,\n                         title = \"Oops, an error happened!\",\n                         text = tostring(err) })\n        in_error = false\n    end)\nend\n-- }}}\n\n-- {{{ Variable definitions\n-- Themes define colours, icons, font and wallpapers.\n-- beautiful.init(gears.filesystem.get_themes_dir() .. \"default/theme.lua\")\nbeautiful.init(\"/home/jan/.config/awesome/themes/first/theme.lua\")\n\n-- This is used later as the default terminal and editor to run.\nterminal = \"urxvt\"\neditor = os.getenv(\"EDITOR\") or \"vim\"\neditor_cmd = terminal .. \" -e \" .. editor\n\n-- Default modkey.\n-- Usually, Mod4 is the key with a logo between Control and Alt.\n-- If you do not like this or do not have such a key,\n-- I suggest you to remap Mod4 to another key using xmodmap or other tools.\n-- However, you can use another modifier like Mod1, but it may interact with others.\nmodkey = \"Mod4\"\n\n-- Table of layouts to cover with awful.layout.inc, order matters.\nawful.layout.layouts = {\n    awful.layout.suit.floating,\n    awful.layout.suit.tile,\n    awful.layout.suit.tile.left,\n    awful.layout.suit.tile.bottom,\n    awful.layout.suit.tile.top,\n    awful.layout.suit.fair,\n    awful.layout.suit.fair.horizontal,\n    awful.layout.suit.spiral,\n    awful.layout.suit.spiral.dwindle,\n    awful.layout.suit.max,\n    awful.layout.suit.max.fullscreen,\n    awful.layout.suit.magnifier,\n    awful.layout.suit.corner.nw,\n    -- awful.layout.suit.corner.ne,\n    -- awful.layout.suit.corner.sw,\n    -- awful.layout.suit.corner.se,\n}\n-- }}}\n\n-- {{{ Helper functions\nlocal function client_menu_toggle_fn()\n    local instance = nil\n\n    return function ()\n        if instance and instance.wibox.visible then\n            instance:hide()\n            instance = nil\n        else\n            instance = awful.menu.clients({ theme = { width = 250 } })\n        end\n    end\nend\n-- }}}\n\n-- {{{ Menu\n-- Create a launcher widget and a main menu\nmyawesomemenu = {\n   { \"hotkeys\", function() return false, hotkeys_popup.show_help end},\n   { \"manual\", terminal .. \" -e man awesome\" },\n   { \"edit config\", editor_cmd .. \" \" .. awesome.conffile },\n   { \"restart\", awesome.restart },\n   { \"quit\", function() awesome.quit() end}\n}\n\nmymainmenu = awful.menu({ items = { { \"awesome\", myawesomemenu, beautiful.awesome_icon },\n                                    { \"open terminal\", terminal }\n                                  }\n                        })\n\nmylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,\n                                     menu = mymainmenu })\n\n-- Menubar configuration\nmenubar.utils.terminal = terminal -- Set the terminal for applications that require it\n-- }}}\n\n-- Keyboard map indicator and switcher\nmykeyboardlayout = awful.widget.keyboardlayout()\n\n-- {{{ Wibar\n-- Create a textclock widget\nmytextclock = wibox.widget.textclock()\n\n-- Create a wibox for each screen and add it\nlocal taglist_buttons = gears.table.join(\n                    awful.button({ }, 1, function(t) t:view_only() end),\n                    awful.button({ modkey }, 1, function(t)\n                                              if client.focus then\n                                                  client.focus:move_to_tag(t)\n                                              end\n                                          end),\n                    awful.button({ }, 3, awful.tag.viewtoggle),\n                    awful.button({ modkey }, 3, function(t)\n                                              if client.focus then\n                                                  client.focus:toggle_tag(t)\n                                              end\n                                          end),\n                    awful.button({ }, 4, function(t) awful.tag.viewnext(t.screen) end),\n                    awful.button({ }, 5, function(t) awful.tag.viewprev(t.screen) end)\n                )\n\nlocal tasklist_buttons = gears.table.join(\n                     awful.button({ }, 1, function (c)\n                                              if c == client.focus then\n                                                  c.minimized = true\n                                              else\n                                                  -- Without this, the following\n                                                  -- :isvisible() makes no sense\n                                                  c.minimized = false\n                                                  if not c:isvisible() and c.first_tag then\n                                                      c.first_tag:view_only()\n                                                  end\n                                                  -- This will also un-minimize\n                                                  -- the client, if needed\n                                                  client.focus = c\n                                                  c:raise()\n                                              end\n                                          end),\n                     awful.button({ }, 3, client_menu_toggle_fn()),\n                     awful.button({ }, 4, function ()\n                                              awful.client.focus.byidx(1)\n                                          end),\n                     awful.button({ }, 5, function ()\n                                              awful.client.focus.byidx(-1)\n                                          end))\n\nlocal function set_wallpaper(s)\n    -- Wallpaper\n    if beautiful.wallpaper then\n        local wallpaper = beautiful.wallpaper\n        -- If wallpaper is a function, call it with the screen\n        if type(wallpaper) == \"function\" then\n            wallpaper = wallpaper(s)\n        end\n        gears.wallpaper.maximized(wallpaper, s, true)\n    end\nend\n\n-- Re-set wallpaper when a screen's geometry changes (e.g. different resolution)\nscreen.connect_signal(\"property::geometry\", set_wallpaper)\n\nawful.screen.connect_for_each_screen(function(s)\n    -- Wallpaper\n    set_wallpaper(s)\n\n    -- Each screen has its own tag table.\n    awful.tag({ \"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\" }, s, awful.layout.layouts[1])\n\n    -- Create a promptbox for each screen\n    s.mypromptbox = awful.widget.prompt()\n    -- Create an imagebox widget which will contains an icon indicating which layout we're using.\n    -- We need one layoutbox per screen.\n    s.mylayoutbox = awful.widget.layoutbox(s)\n    s.mylayoutbox:buttons(gears.table.join(\n                           awful.button({ }, 1, function () awful.layout.inc( 1) end),\n                           awful.button({ }, 3, function () awful.layout.inc(-1) end),\n                           awful.button({ }, 4, function () awful.layout.inc( 1) end),\n                           awful.button({ }, 5, function () awful.layout.inc(-1) end)))\n    -- Create a taglist widget\n    s.mytaglist = awful.widget.taglist(s, awful.widget.taglist.filter.all, taglist_buttons)\n\n    -- Create a tasklist widget\n    s.mytasklist = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, tasklist_buttons)\n\n    -- Create the wibox\n    s.mywibox = awful.wibar({ position = \"top\", screen = s })\n\n    -- Add widgets to the wibox\n    s.mywibox:setup {\n        layout = wibox.layout.align.horizontal,\n        { -- Left widgets\n            layout = wibox.layout.fixed.horizontal,\n            mylauncher,\n            s.mytaglist,\n            s.mypromptbox,\n        },\n        s.mytasklist, -- Middle widget\n        { -- Right widgets\n            layout = wibox.layout.fixed.horizontal,\n            mykeyboardlayout,\n            wibox.widget.systray(),\n            mytextclock,\n            s.mylayoutbox,\n        },\n    }\nend)\n-- }}}\n\n-- {{{ Mouse bindings\nroot.buttons(gears.table.join(\n    awful.button({ }, 3, function () mymainmenu:toggle() end),\n    awful.button({ }, 4, awful.tag.viewnext),\n    awful.button({ }, 5, awful.tag.viewprev)\n))\n-- }}}\n\n-- {{{ Key bindings\nglobalkeys = gears.table.join(\n    awful.key({ modkey,           }, \"s\",      hotkeys_popup.show_help,\n              {description=\"show help\", group=\"awesome\"}),\n    awful.key({ modkey,           }, \"Left\",   awful.tag.viewprev,\n              {description = \"view previous\", group = \"tag\"}),\n    awful.key({ modkey,           }, \"Right\",  awful.tag.viewnext,\n              {description = \"view next\", group = \"tag\"}),\n    awful.key({ modkey,           }, \"Escape\", awful.tag.history.restore,\n              {description = \"go back\", group = \"tag\"}),\n\n    awful.key({ modkey,           }, \"j\",\n        function ()\n            awful.client.focus.byidx( 1)\n        end,\n        {description = \"focus next by index\", group = \"client\"}\n    ),\n    awful.key({ modkey,           }, \"k\",\n        function ()\n            awful.client.focus.byidx(-1)\n        end,\n        {description = \"focus previous by index\", group = \"client\"}\n    ),\n    awful.key({ modkey,           }, \"w\", function () mymainmenu:show() end,\n              {description = \"show main menu\", group = \"awesome\"}),\n\n    -- Layout manipulation\n    awful.key({ modkey, \"Shift\"   }, \"j\", function () awful.client.swap.byidx(  1)    end,\n              {description = \"swap with next client by index\", group = \"client\"}),\n    awful.key({ modkey, \"Shift\"   }, \"k\", function () awful.client.swap.byidx( -1)    end,\n              {description = \"swap with previous client by index\", group = \"client\"}),\n    awful.key({ modkey, \"Control\" }, \"j\", function () awful.screen.focus_relative( 1) end,\n              {description = \"focus the next screen\", group = \"screen\"}),\n    awful.key({ modkey, \"Control\" }, \"k\", function () awful.screen.focus_relative(-1) end,\n              {description = \"focus the previous screen\", group = \"screen\"}),\n    awful.key({ modkey,           }, \"u\", awful.client.urgent.jumpto,\n              {description = \"jump to urgent client\", group = \"client\"}),\n    awful.key({ modkey,           }, \"Tab\",\n        function ()\n            awful.client.focus.history.previous()\n            if client.focus then\n                client.focus:raise()\n            end\n        end,\n        {description = \"go back\", group = \"client\"}),\n\n    -- Standard program\n    awful.key({ modkey,           }, \"Return\", function () awful.spawn(terminal) end,\n              {description = \"open a terminal\", group = \"launcher\"}),\n    awful.key({ modkey, \"Control\" }, \"r\", awesome.restart,\n              {description = \"reload awesome\", group = \"awesome\"}),\n    awful.key({ modkey, \"Shift\"   }, \"q\", awesome.quit,\n              {description = \"quit awesome\", group = \"awesome\"}),\n\n    awful.key({ modkey,           }, \"l\",     function () awful.tag.incmwfact( 0.05)          end,\n              {description = \"increase master width factor\", group = \"layout\"}),\n    awful.key({ modkey,           }, \"h\",     function () awful.tag.incmwfact(-0.05)          end,\n              {description = \"decrease master width factor\", group = \"layout\"}),\n    awful.key({ modkey, \"Shift\"   }, \"h\",     function () awful.tag.incnmaster( 1, nil, true) end,\n              {description = \"increase the number of master clients\", group = \"layout\"}),\n    awful.key({ modkey, \"Shift\"   }, \"l\",     function () awful.tag.incnmaster(-1, nil, true) end,\n              {description = \"decrease the number of master clients\", group = \"layout\"}),\n    awful.key({ modkey, \"Control\" }, \"h\",     function () awful.tag.incncol( 1, nil, true)    end,\n              {description = \"increase the number of columns\", group = \"layout\"}),\n    awful.key({ modkey, \"Control\" }, \"l\",     function () awful.tag.incncol(-1, nil, true)    end,\n              {description = \"decrease the number of columns\", group = \"layout\"}),\n    awful.key({ modkey,           }, \"space\", function () awful.layout.inc( 1)                end,\n              {description = \"select next\", group = \"layout\"}),\n    awful.key({ modkey, \"Shift\"   }, \"space\", function () awful.layout.inc(-1)                end,\n              {description = \"select previous\", group = \"layout\"}),\n\n    awful.key({ modkey, \"Control\" }, \"n\",\n              function ()\n                  local c = awful.client.restore()\n                  -- Focus restored client\n                  if c then\n                      client.focus = c\n                      c:raise()\n                  end\n              end,\n              {description = \"restore minimized\", group = \"client\"}),\n\n    -- Prompt\n    awful.key({ modkey },            \"r\",     function () awful.screen.focused().mypromptbox:run() end,\n              {description = \"run prompt\", group = \"launcher\"}),\n\n    awful.key({ modkey }, \"x\",\n              function ()\n                  awful.prompt.run {\n                    prompt       = \"Run Lua code: \",\n                    textbox      = awful.screen.focused().mypromptbox.widget,\n                    exe_callback = awful.util.eval,\n                    history_path = awful.util.get_cache_dir() .. \"/history_eval\"\n                  }\n              end,\n              {description = \"lua execute prompt\", group = \"awesome\"}),\n    -- Menubar\n    awful.key({ modkey }, \"p\", function() menubar.show() end,\n              {description = \"show the menubar\", group = \"launcher\"})\n)\n\nclientkeys = gears.table.join(\n    awful.key({ modkey,           }, \"f\",\n        function (c)\n            c.fullscreen = not c.fullscreen\n            c:raise()\n        end,\n        {description = \"toggle fullscreen\", group = \"client\"}),\n    awful.key({ modkey, \"Shift\"   }, \"c\",      function (c) c:kill()                         end,\n              {description = \"close\", group = \"client\"}),\n    awful.key({ modkey, \"Control\" }, \"space\",  awful.client.floating.toggle                     ,\n              {description = \"toggle floating\", group = \"client\"}),\n    awful.key({ modkey, \"Control\" }, \"Return\", function (c) c:swap(awful.client.getmaster()) end,\n              {description = \"move to master\", group = \"client\"}),\n    awful.key({ modkey,           }, \"o\",      function (c) c:move_to_screen()               end,\n              {description = \"move to screen\", group = \"client\"}),\n    awful.key({ modkey,           }, \"t\",      function (c) c.ontop = not c.ontop            end,\n              {description = \"toggle keep on top\", group = \"client\"}),\n    awful.key({ modkey,           }, \"n\",\n        function (c)\n            -- The client currently has the input focus, so it cannot be\n            -- minimized, since minimized clients can't have the focus.\n            c.minimized = true\n        end ,\n        {description = \"minimize\", group = \"client\"}),\n    awful.key({ modkey,           }, \"m\",\n        function (c)\n            c.maximized = not c.maximized\n            c:raise()\n        end ,\n        {description = \"(un)maximize\", group = \"client\"}),\n    awful.key({ modkey, \"Control\" }, \"m\",\n        function (c)\n            c.maximized_vertical = not c.maximized_vertical\n            c:raise()\n        end ,\n        {description = \"(un)maximize vertically\", group = \"client\"}),\n    awful.key({ modkey, \"Shift\"   }, \"m\",\n        function (c)\n            c.maximized_horizontal = not c.maximized_horizontal\n            c:raise()\n        end ,\n        {description = \"(un)maximize horizontally\", group = \"client\"})\n)\n\n-- Bind all key numbers to tags.\n-- Be careful: we use keycodes to make it work on any keyboard layout.\n-- This should map on the top row of your keyboard, usually 1 to 9.\nfor i = 1, 9 do\n    globalkeys = gears.table.join(globalkeys,\n        -- View tag only.\n        awful.key({ modkey }, \"#\" .. i + 9,\n                  function ()\n                        local screen = awful.screen.focused()\n                        local tag = screen.tags[i]\n                        if tag then\n                           tag:view_only()\n                        end\n                  end,\n                  {description = \"view tag #\"..i, group = \"tag\"}),\n        -- Toggle tag display.\n        awful.key({ modkey, \"Control\" }, \"#\" .. i + 9,\n                  function ()\n                      local screen = awful.screen.focused()\n                      local tag = screen.tags[i]\n                      if tag then\n                         awful.tag.viewtoggle(tag)\n                      end\n                  end,\n                  {description = \"toggle tag #\" .. i, group = \"tag\"}),\n        -- Move client to tag.\n        awful.key({ modkey, \"Shift\" }, \"#\" .. i + 9,\n                  function ()\n                      if client.focus then\n                          local tag = client.focus.screen.tags[i]\n                          if tag then\n                              client.focus:move_to_tag(tag)\n                          end\n                     end\n                  end,\n                  {description = \"move focused client to tag #\"..i, group = \"tag\"}),\n        -- Toggle tag on focused client.\n        awful.key({ modkey, \"Control\", \"Shift\" }, \"#\" .. i + 9,\n                  function ()\n                      if client.focus then\n                          local tag = client.focus.screen.tags[i]\n                          if tag then\n                              client.focus:toggle_tag(tag)\n                          end\n                      end\n                  end,\n                  {description = \"toggle focused client on tag #\" .. i, group = \"tag\"})\n    )\nend\n\nclientbuttons = gears.table.join(\n    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),\n    awful.button({ modkey }, 1, awful.mouse.client.move),\n    awful.button({ modkey }, 3, awful.mouse.client.resize))\n\n-- Set keys\nroot.keys(globalkeys)\n-- }}}\n\n-- {{{ Rules\n-- Rules to apply to new clients (through the \"manage\" signal).\nawful.rules.rules = {\n    -- All clients will match this rule.\n    { rule = { },\n      properties = { border_width = beautiful.border_width,\n                     border_color = beautiful.border_normal,\n                     focus = awful.client.focus.filter,\n                     raise = true,\n                     keys = clientkeys,\n                     buttons = clientbuttons,\n                     screen = awful.screen.preferred,\n                     placement = awful.placement.no_overlap+awful.placement.no_offscreen\n     }\n    },\n\n    -- Floating clients.\n    { rule_any = {\n        instance = {\n          \"DTA\",  -- Firefox addon DownThemAll.\n          \"copyq\",  -- Includes session name in class.\n        },\n        class = {\n          \"Arandr\",\n          \"Gpick\",\n          \"Kruler\",\n          \"MessageWin\",  -- kalarm.\n          \"Sxiv\",\n          \"Wpa_gui\",\n          \"pinentry\",\n          \"veromix\",\n          \"xtightvncviewer\"},\n\n        name = {\n          \"Event Tester\",  -- xev.\n        },\n        role = {\n          \"AlarmWindow\",  -- Thunderbird's calendar.\n          \"pop-up\",       -- e.g. Google Chrome's (detached) Developer Tools.\n        }\n      }, properties = { floating = true }},\n\n    -- Add titlebars to normal clients and dialogs\n    { rule_any = {type = { \"normal\", \"dialog\" }\n      }, properties = { titlebars_enabled = true }\n    },\n\n    -- Set Firefox to always map on the tag named \"2\" on screen 1.\n    -- { rule = { class = \"Firefox\" },\n    --   properties = { screen = 1, tag = \"2\" } },\n}\n-- }}}\n\n-- {{{ Signals\n-- Signal function to execute when a new client appears.\nclient.connect_signal(\"manage\", function (c)\n    -- Set the windows at the slave,\n    -- i.e. put it at the end of others instead of setting it master.\n    -- if not awesome.startup then awful.client.setslave(c) end\n\n    if awesome.startup and\n      not c.size_hints.user_position\n      and not c.size_hints.program_position then\n        -- Prevent clients from being unreachable after screen count changes.\n        awful.placement.no_offscreen(c)\n    end\nend)\n\n-- Add a titlebar if titlebars_enabled is set to true in the rules.\nclient.connect_signal(\"request::titlebars\", function(c)\n    -- buttons for the titlebar\n    local buttons = gears.table.join(\n        awful.button({ }, 1, function()\n            client.focus = c\n            c:raise()\n            awful.mouse.client.move(c)\n        end),\n        awful.button({ }, 3, function()\n            client.focus = c\n            c:raise()\n            awful.mouse.client.resize(c)\n        end)\n    )\n\n    awful.titlebar(c) : setup {\n        { -- Left\n            awful.titlebar.widget.iconwidget(c),\n            buttons = buttons,\n            layout  = wibox.layout.fixed.horizontal\n        },\n        { -- Middle\n            { -- Title\n                align  = \"center\",\n                widget = awful.titlebar.widget.titlewidget(c)\n            },\n            buttons = buttons,\n            layout  = wibox.layout.flex.horizontal\n        },\n        { -- Right\n            awful.titlebar.widget.floatingbutton (c),\n            awful.titlebar.widget.maximizedbutton(c),\n            awful.titlebar.widget.stickybutton   (c),\n            awful.titlebar.widget.ontopbutton    (c),\n            awful.titlebar.widget.closebutton    (c),\n            layout = wibox.layout.fixed.horizontal()\n        },\n        layout = wibox.layout.align.horizontal\n    }\nend)\n\n-- Enable sloppy focus, so that focus follows mouse.\nclient.connect_signal(\"mouse::enter\", function(c)\n    if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier\n        and awful.client.focus.filter(c) then\n        client.focus = c\n    end\nend)\n\nclient.connect_signal(\"focus\", function(c) c.border_color = beautiful.border_focus end)\nclient.connect_signal(\"unfocus\", function(c) c.border_color = beautiful.border_normal end)\n-- }}}",
					"file": "/home/jan/.config/awesome/rc.lua",
					"file_size": 22644,
					"file_write_time": 131394995564563352,
					"settings":
					{
						"buffer_size": 22644,
						"line_ending": "Unix"
					}
				},
				{
					"file": "/home/jan/.config/awesome/rc-pre-update.lua",
					"settings":
					{
						"buffer_size": 18904,
						"line_ending": "Unix"
					}
				}
			],
			"build_system": "",
			"build_system_choices":
			[
			],
			"build_varint": "",
			"command_palette":
			{
				"height": 392.0,
				"last_filter": ":w",
				"selected_items":
				[
					[
						":w",
						":w - Save"
					],
					[
						"install",
						"Package Control: Install Package"
					],
					[
						":q",
						"Set Syntax: SQL"
					],
					[
						"install pa",
						"Package Control: Install Package"
					]
				],
				"width": 706.0
			},
			"console":
			{
				"height": 126.0,
				"history":
				[
					"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
				]
			},
			"distraction_free":
			{
				"menu_visible": true,
				"show_minimap": false,
				"show_open_files": false,
				"show_tabs": false,
				"side_bar_visible": false,
				"status_bar_visible": false
			},
			"file_history":
			[
				"/home/jan/.Xresources-last",
				"/home/jan/.Xresources-old",
				"/home/jan/.Xresources",
				"/etc/X11/xorg.conf.d/20-thinkpad.conf",
				"/home/jan/.config/sublime-text-3/Packages/User/Preferences.sublime-settings"
			],
			"find":
			{
				"height": 30.0
			},
			"find_in_files":
			{
				"height": 0.0,
				"where_history":
				[
				]
			},
			"find_state":
			{
				"case_sensitive": false,
				"find_history":
				[
					"20"
				],
				"highlight": true,
				"in_selection": false,
				"preserve_case": false,
				"regex": false,
				"replace_history":
				[
				],
				"reverse": false,
				"show_context": true,
				"use_buffer2": true,
				"whole_word": false,
				"wrap": true
			},
			"groups":
			[
				{
					"selected": 2,
					"sheets":
					[
						{
							"buffer": 0,
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 286,
								"regions":
								{
								},
								"selection":
								[
									[
										95,
										95
									]
								],
								"settings":
								{
									"auto_name": "mpd + ncmpcpp",
									"colorcode": true,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 0.0,
								"zoom_level": 1.0
							},
							"stack_index": 3,
							"type": "text"
						},
						{
							"buffer": 1,
							"file": "/home/jan/.Xresources",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 7453,
								"regions":
								{
								},
								"selection":
								[
									[
										2594,
										2594
									]
								],
								"settings":
								{
									"colorcode": true,
									"side_bar_folders_auto_load_folder": 1,
									"syntax": "Packages/Text/Plain text.tmLanguage"
								},
								"translation.x": 0.0,
								"translation.y": 1210.0,
								"zoom_level": 1.0
							},
							"stack_index": 2,
							"type": "text"
						},
						{
							"buffer": 2,
							"file": "/home/jan/.config/awesome/rc.lua",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 22644,
								"regions":
								{
								},
								"selection":
								[
									[
										913,
										913
									]
								],
								"settings":
								{
									"colorcode": true,
									"side_bar_folders_auto_load_folder": 1,
									"syntax": "Packages/Lua/Lua.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 506.0,
								"zoom_level": 1.0
							},
							"stack_index": 0,
							"type": "text"
						}
					]
				},
				{
					"selected": 0,
					"sheets":
					[
						{
							"buffer": 3,
							"file": "/home/jan/.config/awesome/rc-pre-update.lua",
							"semi_transient": false,
							"settings":
							{
								"buffer_size": 18904,
								"regions":
								{
								},
								"selection":
								[
									[
										0,
										0
									]
								],
								"settings":
								{
									"colorcode": true,
									"side_bar_folders_auto_load_folder": 1,
									"syntax": "Packages/Lua/Lua.sublime-syntax",
									"tab_size": 2,
									"translate_tabs_to_spaces": true
								},
								"translation.x": 0.0,
								"translation.y": 2244.0,
								"zoom_level": 1.0
							},
							"stack_index": 1,
							"type": "text"
						}
					]
				}
			],
			"incremental_find":
			{
				"height": 30.0
			},
			"input":
			{
				"height": 0.0
			},
			"layout":
			{
				"cells":
				[
					[
						0,
						0,
						1,
						1
					],
					[
						1,
						0,
						2,
						1
					]
				],
				"cols":
				[
					0.0,
					0.5,
					1.0
				],
				"rows":
				[
					0.0,
					1.0
				]
			},
			"menu_visible": true,
			"output.find_results":
			{
				"height": 0.0
			},
			"pinned_build_system": "",
			"position": "0,0,0,0,0,0,20,2878,1598,2880,1620",
			"project": "",
			"replace":
			{
				"height": 56.0
			},
			"save_all_on_build": true,
			"select_file":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_project":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"select_symbol":
			{
				"height": 0.0,
				"last_filter": "",
				"selected_items":
				[
				],
				"width": 0.0
			},
			"selected_group": 0,
			"settings":
			{
			},
			"show_minimap": true,
			"show_open_files": true,
			"show_tabs": true,
			"side_bar_visible": true,
			"side_bar_width": 229.0,
			"status_bar_visible": true,
			"template_settings":
			{
				"max_columns": 2
			},
			"window_id": 2,
			"workspace_name": ""
		}
	],
	"workspaces":
	{
		"recent_workspaces":
		[
		]
	}
}
